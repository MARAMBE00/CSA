package serviceDesk.dao.impl;

import java.util.List;

import javax.persistence.EntityManager;


//TypedQuery is an interface in the Java Persistence API (JPA) that is used to represent a query that returns a typed result.
//The TypedQuery interface is used to execute a JPQL (Java Persistence Query Language) or a Criteria API query that returns a specific type of object. 
import javax.persistence.TypedQuery;

import serviceDesk.Utils.JPAUtil;
import serviceDesk.dao.IUserDAO;
import serviceDesk.model.User;

public class UserDAO implements IUserDAO<User, Long>{

	private EntityManager em = JPAUtil.getInstance().getEntityManager();
	
	public User saveOrUpdate(User user) throws Exception{
		try {
			em.getTransaction().begin();
			
			if(user.getId() == null) {
				em.persist(user);
			} else {
				if(!em.contains(user)) {
					if(em.find(User.class, user.getId()) == null) {
						throw new Exception("Error while updating location");
					}
				}
				em.merge(user);
			} 
			em.getTransaction().commit();

			return user;
		} finally {
			em.close();	
		}
	}

	public void delete(Long id) {
            
            
//In JPA, a transaction is a sequence of database operations that are executed as a single unit of work. 
//The begin() method marks the start of a new transaction, and any subsequent database operations that are performed using the EntityManager will be executed 
//within the context of this transaction.
                em.getTransaction().begin();
                
//This line uses the EntityManager to retrieve a reference to the User entity with the given id. 
//The getReference() method returns a reference to the entity without actually loading it into memory. 
//The remove() method is then called on the EntityManager to mark the entity for removal.                                
		em.remove(em.getReference(User.class, id));
                
//This line commits the transaction to the database. 
//The changes made to the User entity are persisted to the database and the transaction is closed.
		em.getTransaction().commit();
                
//This line closes the EntityManager instance, releasing any resources associated with it. 
//Closing the EntityManager instance is important to prevent resource leaks and to free up memory.
		em.close();
	}

	public User findById(Long id) {
		return em.find(User.class, id);
	}

	public List<User> findByName(String name) {
            
//This line creates a TypedQuery object using an entity manager (em) to retrieve a list of User objects from the database based on the name parameter. 
//The createQuery() method is used to create a JPQL query, which is similar to SQL. 
//The User.class argument is used to specify the type of the query result.
		TypedQuery<User> query = em
				.createQuery("from User u where u.name like :name", User.class);
                
//This line sets a parameter named name in the JPQL query. 
//The % characters are used as wildcards to match any characters before and after the name parameter.                
		query.setParameter("name", "%" + name + "%");
                
                
// This line executes the JPQL query and returns the result as a list of User objects. 
//The getResultList() method is used to retrieve the query result as a list.
		return query.getResultList();
	}

        
// is used to suppress the warning generated by the compiler when an unchecked or unsafe operation is performed. 
//The annotation is used to indicate that the developer has taken responsibility for ensuring that the operation is safe and that the warning can be ignored.
	@SuppressWarnings("unchecked")

// This line creates a query using the JPA (Java Persistence API) createQuery() method and retrieves all User objects from the database using the getResultList() method. 
//The query is represented as a JPQL (Java Persistence Query Language) string that selects all User objects using the from User statement. 
//The em object is an instance of the EntityManager class, which is used to interact with the database using JPA.
	public List<User> findAll() {
		return em.createQuery("from User").getResultList();
	}

}
